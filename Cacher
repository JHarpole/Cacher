#!/bin/sh

# This script will process Caching Server Debug Logs and e-mail the information to relevant parties
# through the use of Apple's Server Alert mechanism.
## Written by Erik Gomez with help from Google Search.
## Last Modified 02/23/2015

## Variables
loglocation=/Library/Server/Caching/Logs
yesterday=`date -j -v-1d +"%Y"."%m"."%d"`

mkdir -p /tmp/CacheLogs


# Stage I: Take Dates and merge into one log file

## UGLY! Change directory to log directory because of the way I'm grepping the data. 
cd $loglocation 

## Run through each debug log, find all entries for yesterday's date and merge into a combined log.
grep -E ^\s*"${yesterday}" ./* > /tmp/CacheLogs/MergedLog-"${yesterday}".log


# Stage II: Take Bandwidth served from log file, output into a file and calculate

## Anything containing the phrase "start:" means it is bandwidth related. Read the merged log and output to new file.
sed -n -e 's/^.*start: //p ' /tmp/CacheLogs/MergedLog-"${yesterday}".log > /tmp/CacheLogs/Bandwidth_served.txt

## UGLY! Take the first and last line from the new file, trim any parenthesis and output to new files.
head -n1 < /tmp/CacheLogs/Bandwidth_served.txt | tr -d '()' > /tmp/CacheLogs/Bandwidth_First.txt
tail -n1 < /tmp/CacheLogs/Bandwidth_served.txt | tr -d '()' > /tmp/CacheLogs/Bandwidth_Last.txt

## UGLY! Print out the words 1, 6, 11, and 15 because this da bandwidth.
bwclient1=`grep "" /tmp/CacheLogs/Bandwidth_First.txt | awk '{print $1}'`
bwserver1=`grep "" /tmp/CacheLogs/Bandwidth_First.txt | awk '{print $6}'`
bworigin1=`grep "" /tmp/CacheLogs/Bandwidth_First.txt | awk '{print $11}'`
bwpeer1=`grep "" /tmp/CacheLogs/Bandwidth_First.txt | awk '{print $15}'`
bwclient2=`grep "" /tmp/CacheLogs/Bandwidth_Last.txt | awk '{print $1}'`
bwserver2=`grep "" /tmp/CacheLogs/Bandwidth_Last.txt | awk '{print $6}'`
bworigin2=`grep "" /tmp/CacheLogs/Bandwidth_Last.txt | awk '{print $11}'`
bwpeer2=`grep "" /tmp/CacheLogs/Bandwidth_Last.txt | awk '{print $15}'`

## Subtract the bandwidth_first from bandwidth_last to get the difference in bandwidth.
clientbw=`echo $bwclient2-$bwclient1 | bc`
requestedbw=`echo $bwserver2-$bwserver1 | bc`
applebw=`echo $bworigin2-$bworigin1 | bc`
peerbw=`echo $bwpeer2-$bwpeer1 | bc`

## Output data. Assume GB because well... If you need this script you're caching a $$$$ton of data.
echo
echo
echo $clientbw GB Bandwidth served to clients.
echo $requestedbw GB Bandwidth Requested consisting of:
echo $applebw GB from Apple
echo $peerbw GB from Other Caching Servers
echo


# Stage III: Extract IP's from log file, output into file and remove duplicates.

## Look for IP's matching Server's subnet from the Merged Log and output into a new file.
serverip=`ifconfig en0 | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}' | sed 's/\./ /g' | awk '{print $1}'`
egrep --only-matching -E  ''$serverip'\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' /tmp/CacheLogs/MergedLog-"${yesterday}".log > /tmp/CacheLogs/Total_IPs.txt

## Load txt file, sort it and delete any duplicate IP's to get your unique IP number.
cat /tmp/CacheLogs/Total_IPs.txt | sort | uniq -d > /tmp/CacheLogs/Unique_IPs.txt

## Use wc to count the lines from each file to give you a reasonable estimate of IP addresses.
totalipnumber=`wc -l /tmp/CacheLogs/Total_IPs.txt | awk '{print $1}'`
uniqueipnumber=`wc -l /tmp/CacheLogs/Unique_IPs.txt | awk '{print $1}'`

## Output data.
echo $totalipnumber IP Addresses hit the Caching Server yesterday consisting of:
echo $uniqueipnumber Unique IP Addresses.
echo


# Stage IV: Extract URL's from log file, output into file and remove duplicates.

## Anything containing the phrase " http" means it is download related. Read the merged log and output to new file
egrep -o "(\s(http\S+))" /tmp/CacheLogs/MergedLog-"${yesterday}".log | cut -d " " -f 2 > /tmp/CacheLogs/Total_URLs.txt

## Look for "ipa" and output
egrep -o "(ipa)" /tmp/CacheLogs/Total_URLs.txt > /tmp/CacheLogs/Total_IPAs.txt
## Look for "zip" and output
egrep -o "(zip)" /tmp/CacheLogs/Total_URLs.txt > /tmp/CacheLogs/Total_Zips.txt
## Look for "register" and output
egrep -o "(pkg)" /tmp/CacheLogs/Total_URLs.txt > /tmp/CacheLogs/Total_PKGs.txt
## Look for "register" and output
egrep -o "(epub)" /tmp/CacheLogs/Total_URLs.txt > /tmp/CacheLogs/Total_Books.txt
## Look for "register" and output
egrep -o "(register)" /tmp/CacheLogs/Total_URLs.txt > /tmp/CacheLogs/Total_Server_Registers.txt

## Use wc to count the lines from each file to give you a reasonable estimate of total numbers.
totalurlnumber=`wc -l /tmp/CacheLogs/Total_URLs.txt | awk '{print $1}'`
totalipanumber=`wc -l /tmp/CacheLogs/Total_IPAs.txt | awk '{print $1}'`
totalzipnumber=`wc -l /tmp/CacheLogs/Total_Zips.txt | awk '{print $1}'`
totalpkgnumber=`wc -l /tmp/CacheLogs/Total_PKGs.txt | awk '{print $1}'`
totalepubnumber=`wc -l /tmp/CacheLogs/Total_Books.txt | awk '{print $1}'`
totalsregistersnumber=`wc -l /tmp/CacheLogs/Total_Server_Registers.txt | awk '{print $1}'`

## Output data.
echo A total of $totalurlnumber files were downloaded from the Caching Server yesterday consisting of:
echo $totalepubnumber Books
echo $totalipanumber iOS Apps
echo $totalpkgnumber Mac Apps
echo $totalzipnumber Zip files
echo $totalsregistersnumber Apple Server Registrations
echo 

## Load txt file, sort it and delete any duplicate URL's to get your unique URL number.
cat /tmp/CacheLogs/Total_URLs.txt | sort | uniq -d > /tmp/CacheLogs/Unique_URLs.txt
## Look for "epub" and output
egrep -o "(epub)" /tmp/CacheLogs/Unique_URLs.txt > /tmp/CacheLogs/Unique_Books.txt
## Look for "ipa" and output
egrep -o "(ipa)" /tmp/CacheLogs/Unique_URLs.txt > /tmp/CacheLogs/Unique_IPAs.txt
## Look for "pkg" and output
egrep -o "(pkg)" /tmp/CacheLogs/Unique_URLs.txt > /tmp/CacheLogs/Unique_PKGs.txt
## Look for "zip" and output
egrep -o "(zip)" /tmp/CacheLogs/Unique_URLs.txt > /tmp/CacheLogs/Unique_Zips.txt

## Use wc to count the lines from each file to give you a reasonable estimate of total unique numbers.
uniqueurlnumber=`wc -l /tmp/CacheLogs/Unique_URLs.txt | awk '{print $1}'`
uniqueepubnumber=`wc -l /tmp/CacheLogs/Unique_Books.txt | awk '{print $1}'`
uniqueipanumber=`wc -l /tmp/CacheLogs/Unique_IPAs.txt | awk '{print $1}'`
uniquepkgnumber=`wc -l /tmp/CacheLogs/Unique_PKGs.txt | awk '{print $1}'`
uniquezipnumber=`wc -l /tmp/CacheLogs/Unique_Zips.txt | awk '{print $1}'`

## Output data.
echo $uniqueurlnumber Unique files were downloaded from the Caching Server yesterday consisting of:
echo $uniqueepubnumber Unique Books
echo $uniqueipanumber Unique iOS Apps
echo $uniquepkgnumber Unique Mac Apps
echo $uniquezipnumber Unique Zip files
echo
echo


# Stage V: Server Alert

# Create Server alert information for managers who want MOAR DATA.
echo $clientbw GB Bandwidth served to clients. >> /tmp/CacheLogs/AlertInfo.txt
echo $requestedbw GB Bandwidth Requested consisting of: >> /tmp/CacheLogs/AlertInfo.txt
echo $applebw GB from Apple >> /tmp/CacheLogs/AlertInfo.txt
echo $peerbw GB from Other Caching Servers >> /tmp/CacheLogs/AlertInfo.txt
echo >> /tmp/CacheLogs/AlertInfo.txt
echo $totalipnumber IP Addresses hit the Caching Server yesterday consisting of: >> /tmp/CacheLogs/AlertInfo.txt
echo $uniqueipnumber Unique IP Addresses. >> /tmp/CacheLogs/AlertInfo.txt
echo >> /tmp/CacheLogs/AlertInfo.txt
echo A total of $totalurlnumber files were downloaded from the Caching Server yesterday consisting of: >> /tmp/CacheLogs/AlertInfo.txt
echo $totalepubnumber Books >> /tmp/CacheLogs/AlertInfo.txt
echo $totalipanumber iOS Apps >> /tmp/CacheLogs/AlertInfo.txt
echo $totalpkgnumber Mac Apps >> /tmp/CacheLogs/AlertInfo.txt
echo $totalzipnumber Zip files >> /tmp/CacheLogs/AlertInfo.txt
echo $totalsregistersnumber Apple Server Registrations >> /tmp/CacheLogs/AlertInfo.txt
echo >> /tmp/CacheLogs/AlertInfo.txt
echo $uniqueurlnumber Unique files were downloaded from the Caching Server yesterday consisting of: >> /tmp/CacheLogs/AlertInfo.txt
echo $uniqueepubnumber Unique Books >> /tmp/CacheLogs/AlertInfo.txt
echo $uniqueipanumber Unique iOS Apps >> /tmp/CacheLogs/AlertInfo.txt
echo $uniquepkgnumber Unique Mac Apps >> /tmp/CacheLogs/AlertInfo.txt
echo $uniquezipnumber Unique Zip files >> /tmp/CacheLogs/AlertInfo.txt

# Send alert through Server.app
finalalert=`echo | grep "" /tmp/CacheLogs/AlertInfo.txt`
/Applications/Server.app/Contents/ServerRoot/usr/sbin/server postAlert CustomAlert Common subject "Caching Server Data: $yesterday" message "$finalalert" <<<""


# Stage VI: Delete tmp files (the easy part!)
rm -rf /tmp/CacheLogs
