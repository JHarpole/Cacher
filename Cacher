#!/bin/sh

# This script will process Caching Server Debug Logs and e-mail the information to relevant parties
# through the use of Apple's Server Alert mechanism.
## Written by Erik Gomez with help from Google Search.
## Last Modified 02/28/2015

## Variables
loglocation=/Library/Server/Caching/Logs
tmplocation=/tmp/CacheLogs
yesterday=`date -j -v-1d +"%Y"."%m"."%d"`

mkdir -p $tmplocation


# Stage I: Take Dates and merge into one log file

## UGLY! Change directory to log directory because of the way I'm grepping the data. 
cd $loglocation 

## Run through each debug log, find all entries for yesterday's date and merge into a combined log.
grep -E ^\s*"${yesterday}" ./* > "${tmplocation}"/MergedLog-"${yesterday}".log


# Stage II: Take Bandwidth served from log file, output into a file and calculate

## Anything containing the phrase "start:" means it is bandwidth related. Read the merged log and output to new file.
sed -n -e 's/^.*start: //p ' "${tmplocation}"/MergedLog-"${yesterday}".log > "${tmplocation}"/Bandwidth_served.txt

## UGLY! Take the first and last line from the new file, trim any parenthesis and output to new files.
head -n1 < "${tmplocation}"/Bandwidth_served.txt | tr -d '()' > "${tmplocation}"/Bandwidth_First.txt
tail -n1 < "${tmplocation}"/Bandwidth_served.txt | tr -d '()' > "${tmplocation}"/Bandwidth_Last.txt

## UGLY! Print out the words 1, 6, 11, and 15 because this da bandwidth.
bwclient1=`grep "" "${tmplocation}"/Bandwidth_First.txt | awk '{print $1}'`
bwserver1=`grep "" "${tmplocation}"/Bandwidth_First.txt | awk '{print $6}'`
bworigin1=`grep "" "${tmplocation}"/Bandwidth_First.txt | awk '{print $11}'`
bwpeer1=`grep "" "${tmplocation}"/Bandwidth_First.txt | awk '{print $15}'`
bwclient2=`grep "" "${tmplocation}"/Bandwidth_Last.txt | awk '{print $1}'`
bwserver2=`grep "" "${tmplocation}"/Bandwidth_Last.txt | awk '{print $6}'`
bworigin2=`grep "" "${tmplocation}"/Bandwidth_Last.txt | awk '{print $11}'`
bwpeer2=`grep "" "${tmplocation}"/Bandwidth_Last.txt | awk '{print $15}'`

## Subtract the bandwidth_last from bandwidth_first to get the difference in bandwidth.
clientbw1=`echo $bwclient2-$bwclient1 | bc`
requestedbw1=`echo $bwserver2-$bwserver1 | bc`
applebw1=`echo $bworigin2-$bworigin1 | bc`
peerbw1=`echo $bwpeer2-$bwpeer1 | bc`

## Fix for smaller servers who may serve bandwidth in MB and GB in back to back days. Multiple/Divide by 1024 if needed
#### Day before served in MB, Day of served in GB - Multiple bandwidth_last by 1024
clientbw2=`echo $bwclient2*1024-$bwclient1 | bc | awk '{print "scale=2;"$1"/1024"}' | bc`
requestedbw2=`echo $bwserver2*1024-$bwserver1 | bc | awk '{print "scale=2;"$1"/1024"}' | bc`
applebw2=`echo $bworigin2*1024-$bworigin1 | bc | awk '{print "scale=2;"$1"/1024"}' | bc`
peerbw2=`echo $bwpeer2*1024-$bwpeer1 | bc | awk '{print "scale=2;"$1"/1024"}' | bc`

## Fix for smaller servers who may serve bandwidth in MB and GB in back to back days. Multiple/Divide by 1024 if needed
#### Day before served in GB, Day of served in MB - Divide bandwidth_last by 1024
clientbw3=`echo $bwclient2/1024-$bwclient1 | bc | awk '{print "scale=2;"$1"/1024"}' | bc`
requestedbw3=`echo $bwserver2/1024-$bwserver1 | bc | awk '{print "scale=2;"$1"/1024"}' | bc`
applebw3=`echo $bworigin2/1024-$bworigin1 | bc | awk '{print "scale=2;"$1"/1024"}' | bc`
peerbw3=`echo $bwpeer2/1024-$bwpeer1 | bc | awk '{print "scale=2;"$1"/1024"}' | bc`

## Output data.
### Fix for smaller servers who may serve bandwidth in MB and GB in back to back days.
mbbf1=`grep "MB" "${tmplocation}"/Bandwidth_First.txt | awk '{print $2}'`
gbbf1=`grep "GB" "${tmplocation}"/Bandwidth_First.txt | awk '{print $2}'`
mbbf2=`grep "MB" "${tmplocation}"/Bandwidth_Last.txt | awk '{print $2}'`
gbbf2=`grep "GB" "${tmplocation}"/Bandwidth_Last.txt | awk '{print $2}'`

if [[ "$mbbf1" == "MB" && "$mbbf2" == "MB" ]]; then
	echo $clientbw1 MB Bandwidth served to clients.
	echo
	echo $requestedbw1 MB Bandwidth Requested consisting of:
	echo "  $applebw1 MB from Apple"
	echo "  $peerbw1 MB from Other Caching Servers"
elif [[ "$gbbf1" == "GB" && "$gbbf2" == "GB" ]]; then
	echo $clientbw1 GB Bandwidth served to clients.
	echo
	echo $requestedbw1 GB Bandwidth Requested consisting of:
	echo "  $applebw1 GB from Apple"
	echo "  $peerbw1 GB from Other Caching Servers"
elif [[ "$mbbf1" == "MB" && "$gbbf2" == "GB" ]]; then
	echo $clientbw2 GB Bandwidth served to clients.
	echo
	echo $requestedbw2  Bandwidth Requested consisting of:
	echo "  $applebw2 GB from Apple"
	echo "  $peerbw2 GB from Other Caching Servers"
elif [[ "$gbbf1" == "GB" && "$mbbf2" == "MB" ]]; then
	echo $clientbw3 GB Bandwidth served to clients.
	echo
	echo $requestedbw3 GB Bandwidth Requested consisting of:
	echo "  $applebw3 GB from Apple"
	echo "  $peerbw3 GB from Other Caching Servers"
fi
echo


# Stage III: Extract IP's from log file, output into file and remove duplicates.

## Look for IP's matching Server's subnet from the Merged Log and output into a new file.
serverip=`ifconfig en0 | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}' | sed 's/\./ /g' | awk '{print $1}'`
egrep --only-matching -E  ''$serverip'\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' "${tmplocation}"/MergedLog-"${yesterday}".log > "${tmplocation}"/Total_IPs.txt

## Load txt file, sort it and delete any duplicate IP's to get your unique IP number.
cat "${tmplocation}"/Total_IPs.txt | sort | uniq -d > "${tmplocation}"/Unique_IPs.txt

## Use wc to count the lines from each file to give you a reasonable estimate of IP addresses.
totalipnumber=`wc -l "${tmplocation}"/Total_IPs.txt | awk '{print $1}'`
uniqueipnumber=`wc -l "${tmplocation}"/Unique_IPs.txt | awk '{print $1}'`

## Output data.
echo $totalipnumber IP Addresses hit the Caching Server yesterday consisting of:
echo "  $uniqueipnumber Unique IP Addresses."
echo


# Stage IV: Extract iOS Models and build number count.

## Anything containing the phrase "%iOS" means it is build number related. Read the merged log and output to new file
egrep -o "(\s(iOS\S+))" "${tmplocation}"/MergedLog-"${yesterday}".log | cut -d " " -f 2 > "${tmplocation}"/Total_iOS.txt
 
## Look for only "8.0" and output
egrep --only-matching -E ''8'\.(0)$' "${tmplocation}"/Total_iOS.txt > "${tmplocation}"/iOS_8.0.txt
## Look for "8.0.2" and output
egrep -o "(8.0.2)" "${tmplocation}"/Total_iOS.txt > "${tmplocation}"/iOS_8.0.2.txt
## Look for only "8.1" and output
egrep --only-matching -E ''8'\.(1)$' "${tmplocation}"/Total_iOS.txt > "${tmplocation}"/iOS_8.1.txt
## Look for "8.1.1" and output
egrep -o "(8.1.1)" "${tmplocation}"/Total_iOS.txt > "${tmplocation}"/iOS_8.1.1.txt
## Look for "8.1.2" and output
egrep -o "(8.1.2)" "${tmplocation}"/Total_iOS.txt > "${tmplocation}"/iOS_8.1.2.txt
## Look for "8.1.3" and output
egrep -o "(8.1.3)" "${tmplocation}"/Total_iOS.txt > "${tmplocation}"/iOS_8.1.3.txt
## Look for only "8.2" and output
egrep --only-matching -E ''8'\.(2)$' "${tmplocation}"/Total_iOS.txt > "${tmplocation}"/iOS_8.2.txt
## Look for only "8.3" and output
egrep --only-matching -E ''8'\.(3)$' "${tmplocation}"/Total_iOS.txt > "${tmplocation}"/iOS_8.3.txt

## Use wc to count the lines from each file to give you a reasonable estimate of total numbers.
totaliosnumber=`wc -l "${tmplocation}"/Total_iOS.txt | awk '{print $1}'`
totalios800number=`wc -l "${tmplocation}"/iOS_8.0.txt | awk '{print $1}'`
totalios802number=`wc -l "${tmplocation}"/iOS_8.0.2.txt | awk '{print $1}'`
totalios810number=`wc -l "${tmplocation}"/iOS_8.1.txt | awk '{print $1}'`
totalios811number=`wc -l "${tmplocation}"/iOS_8.1.1.txt | awk '{print $1}'`
totalios812number=`wc -l "${tmplocation}"/iOS_8.1.2.txt | awk '{print $1}'`
totalios813number=`wc -l "${tmplocation}"/iOS_8.1.3.txt | awk '{print $1}'`
totalios820number=`wc -l "${tmplocation}"/iOS_8.2.txt | awk '{print $1}'`
totalios830number=`wc -l "${tmplocation}"/iOS_8.3.txt | awk '{print $1}'`

## Anything containing the phrase "%model" means it is model type related. Read the merged log and output to new file
egrep -o "(\s(model\S+))" "${tmplocation}"/MergedLog-"${yesterday}".log | cut -d " " -f 2 > "${tmplocation}"/Total_models.txt

## Look for "TV" and output
egrep -o "(TV)" "${tmplocation}"/Total_models.txt > "${tmplocation}"/Total_AppleTV.txt
## Look for "iPhone" and output
egrep -o "(iPhone)" "${tmplocation}"/Total_models.txt > "${tmplocation}"/Total_iPhone.txt
## Look for "iPad" and output
egrep -o "(iPad)" "${tmplocation}"/Total_models.txt > "${tmplocation}"/Total_iPad.txt
## Look for "iPod" and output
egrep -o "(iPod)" "${tmplocation}"/Total_models.txt > "${tmplocation}"/Total_iPod.txt

## Use wc to count the lines from each file to give you a reasonable estimate of total numbers.
totalmodelnumber=`wc -l "${tmplocation}"/Total_models.txt | awk '{print $1}'`
totalappletvnumber=`wc -l "${tmplocation}"/Total_AppleTV.txt | awk '{print $1}'`
totaliphonenumber=`wc -l "${tmplocation}"/Total_iPhone.txt | awk '{print $1}'`
totalipadnumber=`wc -l "${tmplocation}"/Total_iPad.txt | awk '{print $1}'`
totalipodnumber=`wc -l "${tmplocation}"/Total_iPod.txt | awk '{print $1}'`

## Device Identifiers AppleTV (Only 3,1 and higher can run iOS 8)
## Look for "AppleTV3,1" and output
totalappletv31=`egrep -o "(AppleTV3,1)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "AppleTV3,2" and output
totalappletv32=`egrep -o "(AppleTV3,2)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`

## Device Identifiers iPhone (Only 3,1 and higher can run iOS 8)
## Look for "iPhone3,1" and output
totaliphone31=`egrep -o "(iPhone3,1)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPhone3,3" and output
totaliphone33=`egrep -o "(iPhone3,3)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPhone4,1" and output
totaliphone41=`egrep -o "(iPhone4,1)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPhone5,1" and output
totaliphone51=`egrep -o "(iPhone5,1)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPhone5,1" and output
totaliphone52=`egrep -o "(iPhone5,2)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPhone5,3" and output
totaliphone53=`egrep -o "(iPhone5,3)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPhone6,1" and output
totaliphone61=`egrep -o "(iPhone6,1)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPhone6,2" and output
totaliphone62=`egrep -o "(iPhone6,2)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPhone7,2" and output
totaliphone72=`egrep -o "(iPhone7,2)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPhone7,1" and output
totaliphone71=`egrep -o "(iPhone7,1)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`

## Device Identifiers iPad (Only 2,1 and higher can run iOS 8)
## Look for "iPad2,1" and output
totalipad21=`egrep -o "(iPad2,1)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad2,2" and output
totalipad22=`egrep -o "(iPad2,2)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad2,3" and output
totalipad23=`egrep -o "(iPad2,3)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad2,4" and output
totalipad24=`egrep -o "(iPad2,4)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad2,5" and output
totalipad25=`egrep -o "(iPad2,5)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad2,6" and output
totalipad26=`egrep -o "(iPad2,6)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad2,7" and output
totalipad27=`egrep -o "(iPad2,7)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`

## Look for "iPad3,1" and output
totalipad31=`egrep -o "(iPad3,1)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad3,2" and output
totalipad32=`egrep -o "(iPad3,2)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad3,3" and output
totalipad33=`egrep -o "(iPad3,3)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad3,4" and output
totalipad34=`egrep -o "(iPad3,4)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad3,5" and output
totalipad35=`egrep -o "(iPad3,5)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad3,6" and output
totalipad36=`egrep -o "(iPad3,6)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`

## Look for "iPad4,1" and output
totalipad41=`egrep -o "(iPad4,1)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad4,2" and output
totalipad42=`egrep -o "(iPad4,2)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad4,4" and output
totalipad44=`egrep -o "(iPad4,4)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad4,5" and output
totalipad45=`egrep -o "(iPad4,5)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad4,7" and output
totalipad47=`egrep -o "(iPad4,7)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad4,8" and output
totalipad48=`egrep -o "(iPad4,8)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`

## Look for "iPad5,3" and output
totalipad53=`egrep -o "(iPad5,3)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`
## Look for "iPad5,4" and output
totalipad54=`egrep -o "(iPad5,4)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`

## Device Identifiers iPod (Only 5,1 and higher can run iOS 8)
## Look for "iPod5,1" and output
totalipod51=`egrep -o "(iPod5,1)" "${tmplocation}"/Total_models.txt | wc -l | awk '{print $1}'`

## Output data.
echo A total of $totaliosnumber iOS devices hit the Caching Server yesterday consisting of:
echo "  $totalios800number iOS 8.0 Devices"
echo "  $totalios802number iOS 8.0.2 Devices"
echo "  $totalios810number iOS 8.1 Devices"
echo "  $totalios811number iOS 8.1.1 Devices"
echo "  $totalios812number iOS 8.1.2 Devices"
echo "  $totalios813number iOS 8.1.3 Devices"
echo "  $totalios820number iOS 8.2 Devices [Currently in Beta]"
echo "  $totalios830number iOS 8.3 Devices [Currently in Beta]"
echo 
echo Of these devices, here is the model breakdown:
echo "  $totalappletvnumber Total AppleTVs"
echo "    $totalappletv31 3rd Generation Apple TVs"
echo "    $totalappletv32 4th Generation Apple TVs"
echo "  $totaliphonenumber Total iPhones"
echo "    $totaliphone31 iPhone 4 [GSM]"
echo "    $totaliphone33 iPhone 4 [CDMA]"
echo "    $totaliphone41 iPhone 4S"
echo "    $totaliphone51 iPhone 5 [GSM]"
echo "    $totaliphone52 iPhone 5 [CDMA]"
echo "    $totaliphone53 iPhone 5C"
echo "    $totaliphone61 iPhone 5S"
echo "    $totaliphone62 iPhone 5S [China Model]"
echo "    $totaliphone72 iPhone 6"
echo "    $totaliphone71 iPhone 6 Plus"
echo "  $totalipadnumber Total iPads"
echo "    $totalipad21 iPad 2nd Generation [Wifi]"
echo "    $totalipad22 iPad 2nd Generation [Wifi + GSM]"
echo "    $totalipad23 iPad 2nd Generation [Wifi + CDMA]"
echo "    $totalipad24 iPad 2nd Generation [M2012 Wifi Revision]"
echo "    $totalipad31 iPad 3rd Generation [Wifi]"
echo "    $totalipad32 iPad 3rd Generation [Wifi + GSM]"
echo "    $totalipad33 iPad 3rd Generation [Wifi + CDMA]"
echo "    $totalipad34 iPad 4th Generation [Wifi]"
echo "    $totalipad35 iPad 4th Generation [Wifi + GSM]"
echo "    $totalipad36 iPad 4th Generation [Wifi + CDMA]"
echo "    $totalipad41 iPad Air 1st Generation [Wifi]"
echo "    $totalipad42 iPad Air 1st Generation [Wifi + Cellular]"
echo "    $totalipad53 iPad Air 2nd Generation [Wifi]"
echo "    $totalipad54 iPad Air 2nd Generation [Wifi + Cellular]"
echo 
echo "    $totalipad25 iPad Mini 1st Generation [Wifi]"
echo "    $totalipad26 iPad Mini 1st Generation [Wifi + GSM]"
echo "    $totalipad27 iPad Mini 1st Generation [Wifi + CDMA]"
echo "    $totalipad44 iPad Mini 2nd Generation [Wifi]"
echo "    $totalipad45 iPad Mini 2nd Generation [Wifi + Cellular]"
echo "    $totalipad47 iPad Mini 3rd Generation [Wifi]"
echo "    $totalipad48 iPad Mini 3rd Generation [Wifi + Cellular]"
echo "  $totalipodnumber Total iPods"
echo "    $totalipod51 iPod Touch 5th Generation"
echo 


# Stage V: Extract OS X build number count.

## Anything containing the phrase "%Darwin" means it is OS X related. Read the merged log and output to new file
egrep -o "(\s(Darwin\S+))" "${tmplocation}"/MergedLog-"${yesterday}".log | cut -d " " -f 2 > "${tmplocation}"/Total_OS_X.txt

## Look for "14.0.0" and output
egrep -o "(\/(14.0.0))" "${tmplocation}"/Total_OS_X.txt > "${tmplocation}"/Total_OS_X_10.10.txt
## Look for "14.1.0" and output
egrep -o "(\/(14.1.0))" "${tmplocation}"/Total_OS_X.txt > "${tmplocation}"/Total_OS_X_10.10.2.txt
## Look for "14.3.0" and output
egrep -o "(\/(14.3.0))" "${tmplocation}"/Total_OS_X.txt > "${tmplocation}"/Total_OS_X_10.10.3.txt

## Use wc to count the lines from each file to give you a reasonable estimate of total numbers.
totalosxnumber=`wc -l "${tmplocation}"/Total_OS_X.txt | awk '{print $1}'`
total1010number=`wc -l "${tmplocation}"/Total_OS_X_10.10.txt | awk '{print $1}'`
total10102number=`wc -l "${tmplocation}"/Total_OS_X_10.10.2.txt | awk '{print $1}'`
total10103number=`wc -l "${tmplocation}"/Total_OS_X_10.10.3.txt | awk '{print $1}'`

## Output data. Apple did not update the Darwin versions between 10.10.0 and 10.10.1 :(
echo A total of $totalosxnumber OS X devices hit the Caching Server yesterday consisting of:
echo "  $total1010number OS X Yosemite 10.10.0/10.10.1 Devices [Cannot distinguish between builds]"
echo "  $total10102number OS X Yosemite 10.10.2 Devices"
echo "  $total10103number OS X Yosemite 10.10.3 Devices [Currently in Beta]"
echo 


# Stage VI: Extract URL's from log file, output into file and remove duplicates.

## Anything containing the phrase " http" means it is download related. Read the merged log and output to new file
egrep -o "(\s(http\S+))" "${tmplocation}"/MergedLog-"${yesterday}".log | cut -d " " -f 2 > "${tmplocation}"/Total_URLs.txt

## Look for "ipa" and output
egrep -o "(ipa)" "${tmplocation}"/Total_URLs.txt > "${tmplocation}"/Total_IPAs.txt
## Look for "zip" and output
egrep -o "(zip)" "${tmplocation}"/Total_URLs.txt > "${tmplocation}"/Total_Zips.txt
## Look for "pkg" and output
egrep -o "(pkg)" "${tmplocation}"/Total_URLs.txt > "${tmplocation}"/Total_PKGs.txt
## Look for "epub" and output
egrep -o "(epub)" "${tmplocation}"/Total_URLs.txt > "${tmplocation}"/Total_Books.txt
## Look for "register" and output
egrep -o "(register)" "${tmplocation}"/Total_URLs.txt > "${tmplocation}"/Total_Server_Registers.txt

## Use wc to count the lines from each file to give you a reasonable estimate of total numbers.
totalurlnumber=`wc -l "${tmplocation}"/Total_URLs.txt | awk '{print $1}'`
totalipanumber=`wc -l "${tmplocation}"/Total_IPAs.txt | awk '{print $1}'`
totalzipnumber=`wc -l "${tmplocation}"/Total_Zips.txt | awk '{print $1}'`
totalpkgnumber=`wc -l "${tmplocation}"/Total_PKGs.txt | awk '{print $1}'`
totalepubnumber=`wc -l "${tmplocation}"/Total_Books.txt | awk '{print $1}'`
totalsregistersnumber=`wc -l "${tmplocation}"/Total_Server_Registers.txt | awk '{print $1}'`

## Output data.
echo A total of $totalurlnumber files were downloaded from the Caching Server yesterday consisting of:
echo "  $totalepubnumber Books"
echo "  $totalipanumber iOS Apps"
echo "  $totalpkgnumber Mac Apps"
echo "  $totalzipnumber Zip files"
echo "  $totalsregistersnumber Apple Server Registrations"
echo 

## Load txt file, sort it and delete any duplicate URL's to get your unique URL number.
cat "${tmplocation}"/Total_URLs.txt | sort | uniq -d > "${tmplocation}"/Unique_URLs.txt
## Look for "epub" and output
egrep -o "(epub)" "${tmplocation}"/Unique_URLs.txt > "${tmplocation}"/Unique_Books.txt
## Look for "ipa" and output
egrep -o "(ipa)" "${tmplocation}"/Unique_URLs.txt > "${tmplocation}"/Unique_IPAs.txt
## Look for "pkg" and output
egrep -o "(pkg)" "${tmplocation}"/Unique_URLs.txt > "${tmplocation}"/Unique_PKGs.txt
## Look for "zip" and output
egrep -o "(zip)" "${tmplocation}"/Unique_URLs.txt > "${tmplocation}"/Unique_Zips.txt

## Use wc to count the lines from each file to give you a reasonable estimate of total unique numbers.
uniqueurlnumber=`wc -l "${tmplocation}"/Unique_URLs.txt | awk '{print $1}'`
uniqueepubnumber=`wc -l "${tmplocation}"/Unique_Books.txt | awk '{print $1}'`
uniqueipanumber=`wc -l "${tmplocation}"/Unique_IPAs.txt | awk '{print $1}'`
uniquepkgnumber=`wc -l "${tmplocation}"/Unique_PKGs.txt | awk '{print $1}'`
uniquezipnumber=`wc -l "${tmplocation}"/Unique_Zips.txt | awk '{print $1}'`

## Output data.
echo $uniqueurlnumber Unique files were downloaded from the Caching Server yesterday consisting of:
echo "  $uniqueepubnumber Unique Books"
echo "  $uniqueipanumber Unique iOS Apps"
echo "  $uniquepkgnumber Unique Mac Apps"
echo "  $uniquezipnumber Unique Zip files"
echo


# Stage VII: Server Alert

# Create Server alert information for managers who want MOAR DATA.
if [[ "$mbbf1" == "MB" && "$mbbf2" == "MB" ]]; then
	echo $clientbw1 MB Bandwidth served to clients. >> "${tmplocation}"/AlertInfo.txt
	echo >> "${tmplocation}"/AlertInfo.txt
	echo $requestedbw1 MB Bandwidth Requested consisting of: >> "${tmplocation}"/AlertInfo.txt
	echo "  $applebw1 MB from Apple" >> "${tmplocation}"/AlertInfo.txt
	echo "  $peerbw1 MB from Other Caching Servers" >> "${tmplocation}"/AlertInfo.txt
elif [[ "$gbbf1" == "GB" && "$gbbf2" == "GB" ]]; then
	echo $clientbw1 GB Bandwidth served to clients. >> "${tmplocation}"/AlertInfo.txt
	echo >> "${tmplocation}"/AlertInfo.txt
	echo $requestedbw1 GB Bandwidth Requested consisting of: >> "${tmplocation}"/AlertInfo.txt
	echo "  $applebw1 GB from Apple" >> "${tmplocation}"/AlertInfo.txt
	echo "  $peerbw1 GB from Other Caching Servers" >> "${tmplocation}"/AlertInfo.txt
elif [[ "$mbbf1" == "MB" && "$gbbf2" == "GB" ]]; then
	echo $clientbw2 GB Bandwidth served to clients. >> "${tmplocation}"/AlertInfo.txt
	echo >> "${tmplocation}"/AlertInfo.txt
	echo $requestedbw2  Bandwidth Requested consisting of: >> "${tmplocation}"/AlertInfo.txt
	echo "  $applebw2 GB from Apple" >> "${tmplocation}"/AlertInfo.txt
	echo "  $peerbw2 GB from Other Caching Servers" >> "${tmplocation}"/AlertInfo.txt
elif [[ "$gbbf1" == "GB" && "$mbbf2" == "MB" ]]; then
	echo $clientbw3 GB Bandwidth served to clients. >> "${tmplocation}"/AlertInfo.txt
	echo >> "${tmplocation}"/AlertInfo.txt
	echo $requestedbw3 GB Bandwidth Requested consisting of: >> "${tmplocation}"/AlertInfo.txt
	echo "  $applebw3 GB from Apple" >> "${tmplocation}"/AlertInfo.txt
	echo "  $peerbw3 GB from Other Caching Servers" >> "${tmplocation}"/AlertInfo.txt
fi
echo >> "${tmplocation}"/AlertInfo.txt
echo $totalipnumber IP Addresses hit the Caching Server yesterday consisting of: >> "${tmplocation}"/AlertInfo.txt
echo "  $uniqueipnumber Unique IP Addresses." >> "${tmplocation}"/AlertInfo.txt
echo >> "${tmplocation}"/AlertInfo.txt
echo A total of $totaliosnumber iOS devices hit the Caching Server yesterday consisting of: >> "${tmplocation}"/AlertInfo.txt
echo "  $totalios800number iOS 8.0 Devices" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalios802number iOS 8.0.2 Devices" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalios810number iOS 8.1 Devices" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalios811number iOS 8.1.1 Devices" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalios812number iOS 8.1.2 Devices" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalios813number iOS 8.1.3 Devices" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalios820number iOS 8.2 Devices [Currently in Beta]" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalios830number iOS 8.3 Devices [Currently in Beta]" >> "${tmplocation}"/AlertInfo.txt
echo  >> "${tmplocation}"/AlertInfo.txt
echo Of these devices, here is the model breakdown: >> "${tmplocation}"/AlertInfo.txt
echo "  $totalappletvnumber Total AppleTVs" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalappletv31 3rd Generation Apple TVs" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalappletv32 4th Generation Apple TVs" >> "${tmplocation}"/AlertInfo.txt
echo "  $totaliphonenumber Total iPhones" >> "${tmplocation}"/AlertInfo.txt
echo "    $totaliphone31 iPhone 4 [GSM]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totaliphone33 iPhone 4 [CDMA]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totaliphone41 iPhone 4S" >> "${tmplocation}"/AlertInfo.txt
echo "    $totaliphone51 iPhone 5 [GSM]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totaliphone52 iPhone 5 [CDMA]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totaliphone53 iPhone 5C" >> "${tmplocation}"/AlertInfo.txt
echo "    $totaliphone61 iPhone 5S" >> "${tmplocation}"/AlertInfo.txt
echo "    $totaliphone62 iPhone 5S [China Model]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totaliphone72 iPhone 6" >> "${tmplocation}"/AlertInfo.txt
echo "    $totaliphone71 iPhone 6 Plus" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalipadnumber Total iPads" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad21 iPad 2nd Generation [Wifi]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad22 iPad 2nd Generation [Wifi + GSM]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad23 iPad 2nd Generation [Wifi + CDMA]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad24 iPad 2nd Generation [M2012 Wifi Revision]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad31 iPad 3rd Generation [Wifi]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad32 iPad 3rd Generation [Wifi + GSM]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad33 iPad 3rd Generation [Wifi + CDMA]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad34 iPad 4th Generation [Wifi]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad35 iPad 4th Generation [Wifi + GSM]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad36 iPad 4th Generation [Wifi + CDMA]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad41 iPad Air 1st Generation [Wifi]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad42 iPad Air 1st Generation [Wifi + Cellular]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad53 iPad Air 2nd Generation [Wifi]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad54 iPad Air 2nd Generation [Wifi + Cellular]" >> "${tmplocation}"/AlertInfo.txt
echo  >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad25 iPad Mini 1st Generation [Wifi]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad26 iPad Mini 1st Generation [Wifi + GSM]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad27 iPad Mini 1st Generation [Wifi + CDMA]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad44 iPad Mini 2nd Generation [Wifi]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad45 iPad Mini 2nd Generation [Wifi + Cellular]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad47 iPad Mini 3rd Generation [Wifi]" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipad48 iPad Mini 3rd Generation [Wifi + Cellular]" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalipodnumber Total iPods" >> "${tmplocation}"/AlertInfo.txt
echo "    $totalipod51 iPod Touch 5th Generation" >> "${tmplocation}"/AlertInfo.txt
echo  >> "${tmplocation}"/AlertInfo.txt
echo A total of $totalosxnumber OS X devices hit the Caching Server yesterday consisting of: >> "${tmplocation}"/AlertInfo.txt
echo "  $total1010number OS X Yosemite 10.10.0/10.10.1 Devices [Cannot distinguish between builds]" >> "${tmplocation}"/AlertInfo.txt
echo "  $total10102number OS X Yosemite 10.10.2 Devices" >> "${tmplocation}"/AlertInfo.txt
echo "  $total10103number OS X Yosemite 10.10.3 Devices [Currently in Beta]" >> "${tmplocation}"/AlertInfo.txt
echo  >> "${tmplocation}"/AlertInfo.txt
echo A total of $totalurlnumber files were downloaded from the Caching Server yesterday consisting of: >> "${tmplocation}"/AlertInfo.txt
echo "  $totalepubnumber Books" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalipanumber iOS Apps" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalpkgnumber Mac Apps" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalzipnumber Zip files" >> "${tmplocation}"/AlertInfo.txt
echo "  $totalsregistersnumber Apple Server Registrations" >> "${tmplocation}"/AlertInfo.txt
echo  >> "${tmplocation}"/AlertInfo.txt
echo $uniqueurlnumber Unique files were downloaded from the Caching Server yesterday consisting of: >> "${tmplocation}"/AlertInfo.txt
echo "  $uniqueepubnumber Unique Books" >> "${tmplocation}"/AlertInfo.txt
echo "  $uniqueipanumber Unique iOS Apps" >> "${tmplocation}"/AlertInfo.txt
echo "  $uniquepkgnumber Unique Mac Apps" >> "${tmplocation}"/AlertInfo.txt
echo "  $uniquezipnumber Unique Zip files" >> "${tmplocation}"/AlertInfo.txt

# Send alert through Server.app
finalalert=`echo | grep "" "${tmplocation}"/AlertInfo.txt`
/Applications/Server.app/Contents/ServerRoot/usr/sbin/server postAlert CustomAlert Common subject "Caching Server Data: $yesterday" message "$finalalert" <<<""


# Stage VII: Delete tmp files (the easy part!)
rm -rf $tmplocation
